`timescale 1ns / 1ps

module Rtype_Decoder_tb;
    
    reg [31:0] instruction;
    wire [6:0] opcode;
    wire [4:0] rd;
    wire [2:0] funct3;
    wire [4:0] rs1;
    wire [4:0] rs2;
    wire [6:0] funct7;
    wire [31:0] result;
    
    Rtype_Decoder uut (
        .instruction(instruction),
        .opcode(opcode),
        .rd(rd),
        .funct3(funct3),
        .rs1(rs1),
        .rs2(rs2),
        .funct7(funct7),
        .result(result)
    );
    
    initial begin
        // Test ADD instruction: opcode = 0110011, funct3 = 000, funct7 = 0000000
        instruction = 32'b0000000_00010_00001_000_00011_0110011; // ADD x3, x1, x2
        #10;
        
        // Test SUB instruction: opcode = 0110011, funct3 = 000, funct7 = 0100000
        instruction = 32'b0100000_00010_00001_000_00011_0110011; // SUB x3, x1, x2
        #10;
        
        // Test SLL instruction: opcode = 0110011, funct3 = 001
        instruction = 32'b0000000_00010_00001_001_00011_0110011; // SLL x3, x1, x2
        #10;
        
        // Test SLT instruction: opcode = 0110011, funct3 = 010
        instruction = 32'b0000000_00010_00001_010_00011_0110011; // MUL x3, x1, x2
        #10;
        
        // Test XOR instruction: opcode = 0110011, funct3 = 011
        instruction = 32'b0000000_00010_00001_100_00011_0110011; // XOR x3, x1, x2
        #10;
        
        // Test SRL instruction: opcode = 0110011, funct3 = 100, funct7 = 0000000
        instruction = 32'b0000000_00010_00001_101_00011_0110011; // SRL x3, x1, x2
        #10;
        
        
        // Test OR instruction: opcode = 0110011, funct3 = 101
        instruction = 32'b0000000_00010_00001_110_00011_0110011; // OR x3, x1, x2
        #10;
        
        // Test AND instruction: opcode = 0110011, funct3 = 110
        instruction = 32'b0000000_00010_00001_111_00011_0110011; // AND x3, x1, x2
        #10;
        
        $stop;
    end
    
endmodule
