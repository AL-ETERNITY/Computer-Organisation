module Rtype_Decoder (
    input  [31:0] instruction,
    output [6:0]  opcode,
    output [4:0]  rd,
    output [2:0]  funct3,
    output [4:0]  rs1,
    output [4:0]  rs2,
    output [6:0]  funct7,
    output reg [31:0] result
);

    assign opcode = instruction[6:0];     // Extract opcode
    assign rd     = instruction[11:7];    // Destination register
    assign funct3 = instruction[14:12];   // Function 3 field
    assign rs1    = instruction[19:15];   // Source register 1
    assign rs2    = instruction[24:20];   // Source register 2
    assign funct7 = instruction[31:25];   // Function 7 field

    always @(*) begin
        case (funct3)
            3'b000: result = (funct7 == 7'b0000000) ? rs1 + rs2 : rs2 - rs1; // ADD/SUB
            3'b001: result = rs1 << rs2; // SLL
            3'b010: result = rs1*rs2; //multiplication
            3'b011: result = rs1 ^ rs2; // XOR
            3'b100: result = rs1>>rs2; // SRL
            3'b101: result = rs1 | rs2; // OR
            3'b110: result = rs1 & rs2; // AND
            default: result = 0;
        endcase
    end

endmodule